/* 
========== MODULE STRUCTURE FOR RISC-V ISA SAIL MODELS ==========
 This file defines a compilation order of RISC-V Sail model files 
 which is consistent with their dependencies.
 
 @author: Maryam Ghaffari Saadat, University of Bristol
*/

Prelude { // Core types and definitions used across the project 
  files [
    prelude.sail,
    riscv_xlen32.sail,   // 32-bit register width
    riscv_xlen.sail,     // Generalised register width
    riscv_vlen.sail,     // Vector register width
    prelude_mem_addrtype.sail,
    prelude_mem_metadata.sail,
    prelude_mem.sail,
    riscv_flen_F.sail,   // Single-precision floating-point extension
    riscv_flen.sail,     // General floating-point definitions
  ]
}

RegTypes { // Core register types and error handling
  requires [Prelude]  
  files [
    riscv_extensions.sail,   // ISA extensions
    riscv_errors.sail,       // Error handling
    riscv_types_common.sail, // Common types for RISC-V
    riscv_types_ext.sail,    // Extended types
    riscv_types.sail,        // Main type definitions
    riscv_reg_type.sail,     // General register types
    riscv_vreg_type.sail,    // Vector register types
    riscv_vmem_types.sail,   // Virtual memory types
    riscv_freg_type.sail,    // Floating-point register types
    riscv_types_kext.sail,   // Kernel extension types
  ]
}

Regs { // Definition of registers and system control registers (CSRs)
  requires [Prelude, RegTypes]   
  files [
    riscv_csr_begin.sail,  
    riscv_regs.sail,       // General-purpose registers
    riscv_sys_regs.sail,   // System registers
    riscv_pc_access.sail,  // Programme counter access
    riscv_fdext_regs.sail, // Floating-point and vector registers
    riscv_vext_regs.sail,  // Vector extension registers
    riscv_ext_regs.sail,   // Other extension registers
    riscv_csr_end.sail,    
  ]
}

PMP { // Physical Memory Protection registers and controls
  requires [Prelude, RegTypes, Regs]  
  files [
    riscv_pmp_regs.sail,
    riscv_pmp_control.sail,
  ]
}

PrivilegeTransition { // Controls privilege transitions and exceptions 
  requires [Prelude, RegTypes, Regs, PMP]  
  files [
    riscv_fdext_control.sail, // Floating-point extension control
    riscv_vext_control.sail,  // Vector extension control
    riscv_zkr_control.sail,   // Key-rotable control
    riscv_sys_exceptions.sail, // System exceptions
    riscv_sync_exception.sail, // Synchronous exceptions
    riscv_sys_control.sail,    // System control operations
  ]
}

PhysicalMemory { // Physical memory handling and address validation
  requires [Prelude, RegTypes, Regs, PMP, PrivilegeTransition]  
  files [
    riscv_platform.sail,           // Platform-specific details
    riscv_addr_checks_common.sail, // Common address checks
    riscv_addr_checks.sail,        // Address validity checks
    riscv_mem.sail,                // Main memory access logic
  ]
}

VirtualMemory { // Virtual memory page tables and translation
  requires [Prelude, RegTypes, Regs, PrivilegeTransition, PhysicalMemory]  
  files [
    riscv_vmem_ptw.sail, // Page table walker
    riscv_vmem_tlb.sail, // Translation lookaside buffer
    riscv_vmem_pte.sail, // Page table entry structure
    riscv_vmem.sail,     // Virtual memory operations
  ]
}

Misc { // Miscellaneous extensions and interfaces
  requires [Prelude, RegTypes, Regs, PrivilegeTransition, PhysicalMemory]  
  files [
    riscv_softfloat_interface.sail, // Interface to SoftFloat
    riscv_misa_ext.sail,            // Machine ISA register extensions
    riscv_zihpm.sail,               // Performance monitoring counters
    riscv_sstc.sail,                // Supervisor time compare
  ]
}

Instructions { // Instruction definitions
  requires [Prelude, RegTypes, Regs, PrivilegeTransition, PhysicalMemory, VirtualMemory, Misc] 
  files [
    riscv_insts_begin.sail,
    riscv_insts_base.sail,    // Base instruction set
    riscv_insts_hints.sail,   // Hints (NOP-like instructions)
    riscv_insts_mext.sail,    // Multiplication extension
    riscv_insts_vext_utils.sail,
    riscv_insts_vext_mem.sail,
    riscv_insts_vext_red.sail,
    riscv_insts_fext.sail,    // Floating-point extension
    riscv_insts_dext.sail,    // Double-precision floating-point
    riscv_insts_aext.sail,    // Atomic instructions
    riscv_insts_vext_arith.sail,
    riscv_insts_vext_vset.sail,
    riscv_insts_vext_mask.sail,
    riscv_insts_vext_vm.sail,
    riscv_insts_rmem.sail,
    riscv_insts_zbb.sail,    // Bit manipulation
    riscv_insts_zbkx.sail,
    riscv_insts_zba.sail,
    riscv_insts_zcb.sail,
    riscv_insts_zca.sail,
    riscv_insts_zkn.sail,
    riscv_insts_zcd.sail,
    riscv_insts_zcf.sail,
    riscv_insts_zifencei.sail,
    riscv_insts_zbc.sail,
    riscv_insts_zbkb.sail,
    riscv_insts_zicond.sail,
    riscv_insts_zks.sail,
    riscv_insts_zbs.sail,
    riscv_insts_zicsr.sail,
    riscv_insts_zicbom.sail,
    riscv_insts_svinval.sail,
    riscv_insts_zicboz.sail,
    riscv_insts_zfh.sail,
    riscv_insts_zfa.sail,
    riscv_insts_vext_fp_utils.sail,
    riscv_insts_vext_fp.sail,
    riscv_insts_vext_fp_red.sail,
    riscv_insts_vext_fp_vm.sail,
    riscv_insts_end.sail,
  ]
}

Main { // Core execution logic
  requires [Prelude, RegTypes, Regs, PrivilegeTransition, PhysicalMemory, VirtualMemory, Instructions]
  files [
    riscv_step_common.sail,
    riscv_step_ext.sail,
    riscv_fetch.sail,
    riscv_decode_ext.sail,
    riscv_step.sail,
    main.sail,
    riscv_jalr_rmem.sail,
    riscv_termination.sail,
    riscv_jalr_seq.sail,
  ]
}
